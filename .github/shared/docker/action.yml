name: Build and Push Docker Image to DockerHub
description: Builds a Docker image and either pushes to DockerHub or uploads a tarball artifact

inputs:
  artifact-name:
    required: false
    description: ""
  artifact-path:
    description: ""
    default: .
  platforms:
    description: ""
    default: linux/amd64,linux/arm64,linux/arm64/v8
  build-args:
    required: false
    description: ""
  context:
    description: ""
    default: .
  image-name:
    required: false
    description: ""
  tag:
    required: false
    description: ""
  description:
    required: false
    description: ""
  push:
    description: ""
    default: "false"
  prune:
    description: ""
    default: "true"
  debug:
    description: ""
    default: "false"

runs:
  using: composite
  steps:
    - name: Get short commit hash
      id: git_commit
      run: echo "short_hash=$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"
      shell: bash

    - name: Set image name
      id: image_name
      run: |
        echo "name_of_image=${{ inputs.image-name || github.repository }}" >> "$GITHUB_OUTPUT"
        output=$(echo "${{ inputs.image-name || github.repository }}" | sed 's|/|__|g')
        echo "name_of_export=$output" >> "$GITHUB_OUTPUT"
      shell: bash

    - name: Generate image tag(s)
      id: generated_image_tags
      uses: jabez007/docker-kitchen/.github/shared/script/delimited-string@master
      with:
        source_string: ", ${{ inputs.tag || steps.git_commit.outputs.short_hash }}"
        target_delimiter: ", docker.io/${{ steps.image_name.outputs.name_of_image }}:"
        debug: true

    - name: Image tag(s)
      id: image_tags
      run: |
        IFS=',' read -ra image_tags <<< "${{ inputs.tag || steps.git_commit.outputs.short_hash }}"
        first_tag="${image_tags[0]}"
        echo "tag_for_export=$first_tag" >> "$GITHUB_OUTPUT"
        output=$(echo "${{ steps.generated_image_tags.outputs.target_string }}" | sed 's|^,\s*||')
        echo "tags_for_registry=$output" >> "$GITHUB_OUTPUT"
      shell: bash

    - name: Check our image tags
      if: ${{ inputs.debug == 'true' }}
      run: |
        echo "tags_for_registry: ${{ steps.image_tags.outputs.tags_for_registry }}"
        echo "tag_for_export: ${{ steps.image_tags.outputs.tag_for_export }}"
      shell: bash

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ steps.image_name.outputs.name_of_image }}
        labels: |
          org.opencontainers.image.title=${{ steps.image_name.outputs.name_of_image }}
          org.opencontainers.image.description="${{ inputs.description || github.event.repository.description }}"
        annotations: |
          org.opencontainers.image.title=${{ steps.image_name.outputs.name_of_image }}
          org.opencontainers.image.description="${{ inputs.description || github.event.repository.description }}"

    - name: Download artifacts
      if: ${{ inputs.artifact-name != '' }}
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.artifact-name }}
        path: ${{ inputs.artifact-path }}

    - name: See which artifacts we just downloaded
      if: ${{ inputs.artifact-name != '' && inputs.debug == 'true' }}
      run: ls ${{ inputs.artifact-path }} -lha
      shell: bash

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Container Registry
      if: ${{ inputs.push == 'true' }}
      uses: docker/login-action@v3
      with:
        registry: docker.io
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ env.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      if: ${{ inputs.push == 'true' }}
      uses: docker/build-push-action@v6
      with:
        platforms: ${{ inputs.platforms }}
        build-args: ${{ inputs.build-args }}
        context: ${{ inputs.context }}
        push: true
        tags: ${{ steps.image_tags.outputs.tags_for_registry }}
        labels: ${{ steps.meta.outputs.labels }}
        annotations: ${{ steps.meta.outputs.annotations }}

    - name: Build and export Docker image
      if: ${{ inputs.push != 'true' }}
      uses: docker/build-push-action@v6
      with:
        build-args: ${{ inputs.build-args }}
        context: ${{ inputs.context }}
        tags: ${{ steps.image_name.outputs.name_of_image }}:${{ steps.image_tags.outputs.tag_for_export }}
        outputs: type=docker,dest=/tmp/${{ steps.image_name.outputs.name_of_export }}.tar

    - name: Upload image artifacts
      if: ${{ inputs.push != 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.image_tags.outputs.tag_for_export }}
        path: /tmp/${{ steps.image_name.outputs.name_of_export }}.tar

    - name: Post cleanup
      if: ${{ inputs.prune == 'true' }}
      run: docker image prune -f
      shell: bash
