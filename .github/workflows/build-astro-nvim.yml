name: Run Shared Build Workflow for astro-nvim

on:
  pull_request:
    branches:
      - main
      - master
    paths:
      - "astro-nvim/Dockerfile"
      - "astro-nvim/*.conf"
      - "astro-nvim/*.sh"
      - "install.sh"

env:
  IMAGE_NAME: astro-nvim

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: See which repo we just cloned
        if: ${{ vars.pipeline_debug == 'true' }}
        run: ls -alh
        shell: bash

      - name: Copy install script to Docker context
        run: |
          if [[ ! -f ./install.sh ]]; then
            echo "install.sh not found â€“ build cannot proceed" >&2
            exit 1
          fi
          cp ./install.sh ./astro-nvim/

      - uses: jabez007/docker-kitchen/.github/shared/docker@master
        with:
          context: ./astro-nvim
          image-name: ${{ vars.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
          tag: latest
          debug: ${{ vars.pipeline_debug }}

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: latest
          path: ./artifacts

      - name: Load Docker image
        run: |
          docker load < ./artifacts/${{ vars.DOCKER_USERNAME }}__${{ env.IMAGE_NAME }}.tar

      - name: Test Go installation
        run: |
          set -euo pipefail
          echo "Testing Go installation..."
          docker run --rm --entrypoint="" ${{ vars.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest bash -c "
            source ~/.bashrc 2>/dev/null || true
            go version && 
            echo 'Go version check: PASSED' || 
            (echo 'Go version check: FAILED' && exit 1)
          "

      - name: Test Node.js installation
        run: |
          set -euo pipefail
          echo "Testing Node.js installation..."
          docker run --rm --entrypoint="" ${{ vars.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest bash -c "
            source ~/.bashrc 2>/dev/null || true
            node --version && 
            npm --version && 
            echo 'Node.js version check: PASSED' || 
            (echo 'Node.js version check: FAILED' && exit 1)
          "

      - name: Test basic functionality
        run: |
          set -euo pipefail
          echo "Testing basic Go functionality..."
          docker run --rm --entrypoint="" ${{ vars.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest bash -c "
            source ~/.bashrc 2>/dev/null || true
            echo 'package main
            import \"fmt\"
            func main() {
              fmt.Println(\"Hello from Go!\")
            }' > test.go &&
            go run test.go &&
            echo 'Go functionality test: PASSED' ||
            (echo 'Go functionality test: FAILED' && exit 1)
          "

      - name: Test basic Node.js functionality
        run: |
          set -euo pipefail
          echo "Testing basic Node.js functionality..."
          docker run --rm --entrypoint="" ${{ vars.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest bash -c "
            source ~/.bashrc 2>/dev/null || true
            echo 'console.log(\"Hello from Node.js!\");' > test.js &&
            node test.js &&
            echo 'Node.js functionality test: PASSED' ||
            (echo 'Node.js functionality test: FAILED' && exit 1)
          "

      - name: Test Neovim and development tools
        run: |
          set -euo pipefail
          echo "Testing Neovim and development tools..."
          docker run --rm --entrypoint="" ${{ vars.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest bash -c "
            source ~/.bashrc 2>/dev/null || true
            nvim --version &&
            which gopls &&
            echo 'Development tools test: PASSED' ||
            (echo 'Development tools test: FAILED' && exit 1)
          "

      - name: Test user environment
        run: |
          set -euo pipefail
          echo "Testing user environment..."
          docker run --rm --entrypoint="" ${{ vars.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest bash -c "
            source ~/.bashrc 2>/dev/null || true
            echo 'Current user:' && whoami &&
            echo 'Home directory:' && pwd &&
            echo 'Go env:' && go env GOPATH &&
            echo 'Node env:' && npm config get prefix &&
            echo 'User environment test: PASSED'
          "
